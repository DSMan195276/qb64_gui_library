
@if not defined __GUI_OBJECTS_GUI_ELEMENT_BM__
@define __GUI_OBJECTS_GUI_ELEMENT_BM__

'$include:'signal_object.bm'

SUB GUI_element_init (this as _OFFSET)
GUI_signal_init this
@(this, GUI_element.img) = GUI_IMAGE_NULL AS LONG
@(this, GUI_element.parent) = GUI_NULL AS _OFFSET
@(this, GUI_element.drw) = GUI_NULL AS @PROC
END SUB

SUB GUI_element_clear (this as _OFFSET)
if @(this, GUI_element.img, LONG) <> -1 then
  _FREEIMAGE @(this, GUI_element.img, LONG)
end if
GUI_element_remove_parent this
GUI_signal_clear this
END SUB

FUNCTION GUI_element_get_element_type& (this as _OFFSET)
GUI_element_get_element_type& = @(this, GUI_element.element_type, LONG)
END FUNCTION

FUNCTION GUI_element_get_width& (this as _OFFSET)
GUI_element_get_width& = @(this, GUI_element.dimension.wid, LONG)
END FUNCTION

FUNCTION GUI_element_get_height& (this as _OFFSET)
GUI_element_get_height& = @(this, GUI_element.dimension.hei, LONG)
END FUNCTION

SUB GUI_element_show (this as _OFFSET)
GUI_element_FLAG_SET_VISIBLE this
END SUB

SUB GUI_element_hide (this as _OFFSET)
GUI_element_FLAG_UNSET_VISIBLE this
END SUB

SUB GUI_element_create_image (this as _OFFSET)
if @(this, GUI_element.img, LONG) <> -1 then 
  _FREEIMAGE @(this, GUI_element.img, LONG)
end if
@if defined GUI_TEXT
  '_MEMPUT FAKE_MEM, this + _OFFSET(GUI_element.img, TYPE), _NEWIMAGE(_MEMGET(FAKE_MEM, this + _OFFSET(GUI_element.size.hei, type), LONG), _MEMGET(FAKE_MEM, this + _OFFSET(GUI_element.size.wid, LONG)))
  i& = _NEWIMAGE(@(this, GUI_element.dimension.hei, LONG), @(this, GUI_element.dimension.wid, LONG), 0)
@else
  i& = _NEWIMAGE(@(this, GUI_element.dimension.hei, LONG), @(this, GUI_element.dimension.wid, LONG), 32)
@endif
@(this, GUI_element.img) = i&
END SUB

FUNCTION GUI_element_get_image& (this as _OFFSET)
GUI_element_get_image& = @(this, GUI_element.img, LONG)
END FUNCTION

SUB GUI_element_set_size (this AS _OFFSET, wid as _UNSIGNED LONG, hei AS _UNSIGNED LONG)
@(this, GUI_element.dimension.wid) = wid
@(this, GUI_element.dimension.hei) = hei
GUI_element_create_image this
END SUB

SUB GUI_element_set_dimension_d (this AS _OFFSET, d as GUI_dimension)
@(this, GUI_element.dimension) = d
GUI_element_create_image this
END SUB

SUB GUI_element_add_parent (this as _OFFSET, parent AS _OFFSET)
@(this, GUI_element.parent) = GUI_ref_Object_get_ref%&(parent) AS _OFFSET
END SUB

SUB GUI_element_remove_parent (this as _OFFSET)
if @(this, GUI_element.parent, _OFFSET) <> 0 then
  GUI_ref_Object_release_ref @(this, GUI_element.parent, _OFFSET)
  @(this, GUI_element.parent) = 0 AS _OFFSET
end if
END SUB

SUB GUI_element_set_draw_proc (this as _OFFSET, pro as @PROC)
@(this, GUI_element.drw) = pro AS @PROC
END SUB

@if defined GUI_TEXT

  SUB GUI_element_set_location (this as _OFFSET, row as _UNSIGNED LONG, col AS _UNSIGNED LONG)
  @(this, GUI_element.dimension.row) = row
  @(this, GUI_element.dimension.col) = col
  END SUB
  
  SUB GUI_element_set_dimension (this AS _OFFSET, row as _UNSIGNED LONG, col as _UNSIGNED LONG, wid AS _UNSIGNED LONG, hei AS _UNSIGNED LONG)
  @(this, GUI_element.dimension.row) = row
  @(this, GUI_element.dimension.col) = col
  @(this, GUI_element.dimension.wid) = wid
  @(this, GUI_element.dimension.hei) = hei
  GUI_element_create_image this
  END SUB
    
  FUNCTION GUI_element_get_row& (this as _OFFSET)
  GUI_element_get_row& = @(this, GUI_element.dimension.row, LONG)
  END FUNCTION

  FUNCTION GUI_element_get_col& (this as _OFFSET)
  GUI_element_get_col& = @(this, GUI_element.dimension.col, LONG)
  END FUNCTION

@else

  'Note -- Will probably be ignored if not using a fixed layout
  SUB GUI_element_set_location (this AS _OFFSET, x AS _UNSIGNED LONG, y AS _UNSIGNED LONG)
  @(this, GUI_element.dimension.x) = x
  @(this, GUI_element.dimension.y) = y
  END SUB

  SUB GUI_element_set_dimension (this AS _OFFSET, x as _UNSIGNED LONG, y as _UNSIGNED LONG, wid AS _UNSIGNED LONG, hei AS _UNSIGNED LONG)
  @(this, GUI_element.dimension.x) = x 
  @(this, GUI_element.dimension.y) = y
  @(this, GUI_element.dimension.wid) = wid
  @(this, GUI_element.dimension.hei) = hei
  GUI_element_create_image this
  END SUB
  
  FUNCTION GUI_element_get_x& (this as _OFFSET)
  GUI_element_get_x& = @(this, GUI_element.dimension.x, LONG)
  END FUNCTION
  
  FUNCTION GUI_element_get_y& (this as _OFFSET)
  GUI_element_get_y& = @(this, GUI_element.dimension.y, LONG)
  END FUNCTION

@endif

@endif
