
@if not defined __GUI_ELEMENTS_BUTTON_BM__
@define __GUI_ELEMENTS_BUTTON_BM__

'$include:'container.bm'

FUNCTION GUI_element_button_new%& ()
GUI_element_button_new%& = GUI_element_button_new_with_text%&("")
END FUNCTION

FUNCTION GUI_element_button_new_with_text%& (n$)
DIM this as _OFFSET
this = MEM_MALLOC%&(LEN(GUI_element_button, TYPE))
GUI_element_button_init this
GUI_element_button_set_text this, n$
GUI_element_button_new_with_text%& = this
END FUNCTION

SUB GUI_element_button_init (this as _OFFSET)
GUI_element_container_init this
GUI_element_set_element_type this, GUI_BUTTON
GUI_element_set_draw_proc this, @SUB(GUI_element_button_draw)
GUI_ref_Object_set_delete_proc this, @SUB(GUI_element_button_delete)

@(this, GUI_element_button.theme.sel.f) = 0 AS LONG
@(this, GUI_element_button.theme.sel.b) = 7 AS LONG
END SUB

SUB GUI_element_button_delete (this as _OFFSET)
GUI_element_button_clear this
MEM_FREE this
END SUB

SUB GUI_element_button_clear (this as _OFFSET)
GUI_element_container_clear this
END SUB

SUB GUI_element_button_set_text (this as _OFFSET, t$)
DIM m as MEM_string
m =  @(this, GUI_element_button.text, MEM_String)
MEM_put_str m, t$
@(this, GUI_element_button.text) = m
GUI_element_set_size this, 1, len(t$) + 4
@call(_OFFSET) @(this, GUI_element.drw, @PROC), this
END SUB

SUB GUI_element_button_draw (this as _OFFSET)
DIM m as MEM_String
d& = _DEST
_DEST @(this, GUI_element.img, LONG)
COLOR @(this, GUI_element_button.theme.sel.f, _BYTE), @(this, GUI_element_button.theme.sel.b, _BYTE)
m = @(this, GUI_element_button.text, MEM_String)
PRINT "< "; MEM_get_str$(m); " >";
_DEST d&
END SUB

@endif
